diff --git a/config b/config
index 84f7172..a02c4e8 100644
--- a/config
+++ b/config
@@ -224,6 +224,7 @@ NGX_ADDON_SRCS="$NGX_ADDON_SRCS \
                 $ngx_addon_dir/src/ngx_http_lua_timer.c \
                 $ngx_addon_dir/src/ngx_http_lua_config.c \
                 "
+NGX_ADDON_SRCS="$NGX_ADDON_SRCS $ngx_addon_dir/src/ngx_http_lua_graphite.c"
 
 NGX_ADDON_DEPS="$NGX_ADDON_DEPS \
                 $ngx_addon_dir/src/ddebug.h \
@@ -275,6 +276,7 @@ NGX_ADDON_DEPS="$NGX_ADDON_DEPS \
                 $ngx_addon_dir/src/ngx_http_lua_timer.h \
                 $ngx_addon_dir/src/ngx_http_lua_config.h \
                 "
+NGX_ADDON_DEPS="$NGX_ADDON_DEPS $ngx_addon_dir/src/ngx_http_lua_graphite.h"
 
 CFLAGS="$CFLAGS -DNDK_SET_VAR"
 
diff --git a/src/ngx_http_lua_graphite.c b/src/ngx_http_lua_graphite.c
new file mode 100644
index 0000000..20812f9
--- /dev/null
+++ b/src/ngx_http_lua_graphite.c
@@ -0,0 +1,120 @@
+#ifndef DDEBUG
+#define DDEBUG 0
+#endif
+#include "ddebug.h"
+
+
+#include "ngx_http_graphite_module.h"
+#include "ngx_http_lua_graphite.h"
+#include "ngx_http_lua_util.h"
+
+
+static int ngx_http_lua_graphite(lua_State *L);
+static int ngx_http_lua_graphite_get(lua_State *L);
+static int ngx_http_lua_graphite_set(lua_State *L);
+
+
+void
+ngx_http_lua_inject_graphite_api(lua_State *L)
+{
+    lua_createtable(L, 0, 2);
+    lua_newtable(L);
+    lua_pushcfunction(L, ngx_http_lua_graphite);
+    lua_setfield(L, -2, "__call");
+    lua_setmetatable(L, -2);
+
+    lua_pushcfunction(L, ngx_http_lua_graphite_get);
+    lua_setfield(L, -2, "get");
+
+    lua_pushcfunction(L, ngx_http_lua_graphite_set);
+    lua_setfield(L, -2, "set");
+
+    lua_setfield(L, -2, "graphite");
+}
+
+
+static int
+ngx_http_lua_graphite(lua_State *L) {
+
+    size_t n = lua_gettop(L) - 1;
+    if (n != 2 && n != 3) {
+        return luaL_error(L, "ngx.graphite expecting 2 or 3 arguments got %d", n);
+    }
+
+    ngx_http_request_t *r;
+    r = ngx_http_lua_get_req(L);
+
+    if (r == NULL) {
+        return luaL_error(L, "no request object found");
+    }
+
+    ngx_str_t name;
+    name.data = (u_char*)lua_tolstring(L, 2, &name.len);
+    if (name.data == NULL)
+        return 0;
+
+    double value = lua_tonumber(L, 3);
+    const char *config = NULL;
+    if (n == 3)
+        config = lua_tostring(L, 4);
+
+    ngx_http_graphite(r, &name, value, config);
+
+    return 0;
+}
+
+
+static int
+ngx_http_lua_graphite_get(lua_State *L) {
+
+    size_t n = lua_gettop(L);
+    if (n != 1) {
+        return luaL_error(L, "ngx.graphite.get expecting 1 argument got %d", n);
+    }
+
+    ngx_http_request_t *r;
+    r = ngx_http_lua_get_req(L);
+
+    if (r == NULL) {
+        return luaL_error(L, "no request object found");
+    }
+
+    ngx_str_t name;
+    name.data = (u_char*)lua_tolstring(L, 1, &name.len);
+    if (name.data == NULL)
+        return 0;
+
+    double value = ngx_http_graphite_get(r, &name);
+
+    lua_pushnumber(L, value);
+
+    return 1;
+}
+
+
+static int
+ngx_http_lua_graphite_set(lua_State *L) {
+
+    size_t n = lua_gettop(L);
+    if (n != 2) {
+        return luaL_error(L, "ngx.graphite.get expecting 2 arguments got %d", n);
+    }
+
+    ngx_http_request_t *r;
+    r = ngx_http_lua_get_req(L);
+
+    if (r == NULL) {
+        return luaL_error(L, "no request object found");
+    }
+
+    ngx_str_t name;
+    name.data = (u_char*)lua_tolstring(L, 1, &name.len);
+    if (name.data == NULL)
+        return 0;
+
+    double value = lua_tonumber(L, 2);
+
+    ngx_http_graphite_set(r, &name, value);
+
+    return 0;
+}
diff --git a/src/ngx_http_lua_util.c b/src/ngx_http_lua_util.c
index a1c4b1c..212eb18 100644
--- a/src/ngx_http_lua_util.c
+++ b/src/ngx_http_lua_util.c
@@ -48,6 +48,7 @@
 #include "ngx_http_lua_timer.h"
 #include "ngx_http_lua_config.h"
 
+#include "ngx_http_lua_graphite.h"
 
 #if 1
 #undef ngx_http_lua_probe_info
@@ -750,7 +751,7 @@ ngx_http_lua_inject_ngx_api(ngx_conf_t *cf, lua_State *L)
 
     lmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_lua_module);
 
-    lua_createtable(L, 0 /* narr */, 96 /* nrec */);    /* ngx.* */
+    lua_createtable(L, 0 /* narr */, 97 /* nrec */);    /* ngx.* */
 
     ngx_http_lua_inject_arg_api(L);
 
@@ -779,6 +780,7 @@ ngx_http_lua_inject_ngx_api(ngx_conf_t *cf, lua_State *L)
     ngx_http_lua_inject_uthread_api(cf->log, L);
     ngx_http_lua_inject_timer_api(L);
     ngx_http_lua_inject_config_api(L);
+    ngx_http_lua_inject_graphite_api(L);
 
     ngx_http_lua_inject_misc_api(L);
 
