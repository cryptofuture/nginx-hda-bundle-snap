diff --git a/config b/config
index c91a07e..9f89c8e 100644
--- a/config
+++ b/config
@@ -357,6 +357,7 @@ HTTP_LUA_SRCS=" \
             $ngx_addon_dir/src/ngx_http_lua_ssl_ocsp.c \
             $ngx_addon_dir/src/ngx_http_lua_lex.c \
             $ngx_addon_dir/src/ngx_http_lua_balancer.c \
+            $ngx_addon_dir/src/ngx_http_lua_graphite.c \
             "
 
 HTTP_LUA_DEPS=" \
@@ -414,6 +415,7 @@ HTTP_LUA_DEPS=" \
             $ngx_addon_dir/src/ngx_http_lua_ssl_certby.h \
             $ngx_addon_dir/src/ngx_http_lua_lex.h \
             $ngx_addon_dir/src/ngx_http_lua_balancer.h \
+            $ngx_addon_dir/src/ngx_http_lua_graphite.h \
             "
 
 CFLAGS="$CFLAGS -DNDK_SET_VAR"
diff --git a/src/ngx_http_lua_graphite.c b/src/ngx_http_lua_graphite.c
new file mode 100644
index 0000000..20812f9
--- /dev/null
+++ b/src/ngx_http_lua_graphite.c
@@ -0,0 +1,120 @@
+#ifndef DDEBUG
+#define DDEBUG 0
+#endif
+#include "ddebug.h"
+
+
+#include "ngx_http_graphite_module.h"
+#include "ngx_http_lua_graphite.h"
+#include "ngx_http_lua_util.h"
+
+
+static int ngx_http_lua_graphite(lua_State *L);
+static int ngx_http_lua_graphite_get(lua_State *L);
+static int ngx_http_lua_graphite_set(lua_State *L);
+
+
+void
+ngx_http_lua_inject_graphite_api(lua_State *L)
+{
+    lua_createtable(L, 0, 2);
+    lua_newtable(L);
+    lua_pushcfunction(L, ngx_http_lua_graphite);
+    lua_setfield(L, -2, "__call");
+    lua_setmetatable(L, -2);
+
+    lua_pushcfunction(L, ngx_http_lua_graphite_get);
+    lua_setfield(L, -2, "get");
+
+    lua_pushcfunction(L, ngx_http_lua_graphite_set);
+    lua_setfield(L, -2, "set");
+
+    lua_setfield(L, -2, "graphite");
+}
+
+
+static int
+ngx_http_lua_graphite(lua_State *L) {
+
+    size_t n = lua_gettop(L) - 1;
+    if (n != 2 && n != 3) {
+        return luaL_error(L, "ngx.graphite expecting 2 or 3 arguments got %d", n);
+    }
+
+    ngx_http_request_t *r;
+    r = ngx_http_lua_get_req(L);
+
+    if (r == NULL) {
+        return luaL_error(L, "no request object found");
+    }
+
+    ngx_str_t name;
+    name.data = (u_char*)lua_tolstring(L, 2, &name.len);
+    if (name.data == NULL)
+        return 0;
+
+    double value = lua_tonumber(L, 3);
+    const char *config = NULL;
+    if (n == 3)
+        config = lua_tostring(L, 4);
+
+    ngx_http_graphite(r, &name, value, config);
+
+    return 0;
+}
+
+
+static int
+ngx_http_lua_graphite_get(lua_State *L) {
+
+    size_t n = lua_gettop(L);
+    if (n != 1) {
+        return luaL_error(L, "ngx.graphite.get expecting 1 argument got %d", n);
+    }
+
+    ngx_http_request_t *r;
+    r = ngx_http_lua_get_req(L);
+
+    if (r == NULL) {
+        return luaL_error(L, "no request object found");
+    }
+
+    ngx_str_t name;
+    name.data = (u_char*)lua_tolstring(L, 1, &name.len);
+    if (name.data == NULL)
+        return 0;
+
+    double value = ngx_http_graphite_get(r, &name);
+
+    lua_pushnumber(L, value);
+
+    return 1;
+}
+
+
+static int
+ngx_http_lua_graphite_set(lua_State *L) {
+
+    size_t n = lua_gettop(L);
+    if (n != 2) {
+        return luaL_error(L, "ngx.graphite.get expecting 2 arguments got %d", n);
+    }
+
+    ngx_http_request_t *r;
+    r = ngx_http_lua_get_req(L);
+
+    if (r == NULL) {
+        return luaL_error(L, "no request object found");
+    }
+
+    ngx_str_t name;
+    name.data = (u_char*)lua_tolstring(L, 1, &name.len);
+    if (name.data == NULL)
+        return 0;
+
+    double value = lua_tonumber(L, 2);
+
+    ngx_http_graphite_set(r, &name, value);
+
+    return 0;
+}
diff --git a/src/ngx_http_lua_util.c b/src/ngx_http_lua_util.c
index 1bd1388..0bebff3 100644
--- a/src/ngx_http_lua_util.c
+++ b/src/ngx_http_lua_util.c
@@ -51,6 +51,7 @@
 #include "ngx_http_lua_socket_tcp.h"
 #include "ngx_http_lua_ssl_certby.h"
 
+#include "ngx_http_lua_graphite.h"
 
 #if 1
 #undef ngx_http_lua_probe_info
@@ -719,7 +720,7 @@ static void
 ngx_http_lua_inject_ngx_api(lua_State *L, ngx_http_lua_main_conf_t *lmcf,
     ngx_log_t *log)
 {
-    lua_createtable(L, 0 /* narr */, 116 /* nrec */);    /* ngx.* */
+    lua_createtable(L, 0 /* narr */, 117 /* nrec */);    /* ngx.* */
 
     lua_pushcfunction(L, ngx_http_lua_get_raw_phase_context);
     lua_setfield(L, -2, "_phase_ctx");
@@ -753,6 +754,7 @@ ngx_http_lua_inject_ngx_api(lua_State *L, ngx_http_lua_main_conf_t *lmcf,
     ngx_http_lua_inject_timer_api(L);
     ngx_http_lua_inject_config_api(L);
     ngx_http_lua_inject_worker_api(L);
+    ngx_http_lua_inject_graphite_api(L);
 
     ngx_http_lua_inject_misc_api(L);
 
@@ -1003,7 +1005,16 @@ ngx_http_lua_run_thread(lua_State *L, ngx_http_request_t *r,
             ngx_http_lua_assert(orig_coctx->co_top + nrets
                                 == lua_gettop(orig_coctx->co));
 
+#ifdef NGX_GRAPHITE_PATCH
+            struct timeval start_tp;
+            ngx_gettimeofday(&start_tp);
+#endif
             rv = lua_resume(orig_coctx->co, nrets);
+#ifdef NGX_GRAPHITE_PATCH
+            struct timeval stop_tp;
+            ngx_gettimeofday(&stop_tp);
+            r->lua_time += (stop_tp.tv_sec - start_tp.tv_sec) * 1000 + (stop_tp.tv_usec - start_tp.tv_usec) / 1000;
+#endif
 
 #if (NGX_PCRE)
             /* XXX: work-around to nginx regex subsystem */
